{-# START_FILE package.yaml #-}
name: {{name}}
version: '1.0'
# synopsis:
# description:
license: ISC
author: {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer: {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright: {{year}}{{^year}}2022{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}
category: {{category}}{{^category}}Unclassified{{/category}}
extra-source-files:
- CHANGELOG.md
- .gitignore
- package.yaml
- README.md
# - stack.yaml

github: {{github-username}}/{{name}}

ghc-options:
- -fwarn-tabs
- -Wall
- -Wcompat
# - -Werror  # Around the time of lts-12.11 (ghc < 8.4.3), this is no longer recommended
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wpartial-fields
- -Wredundant-constraints

default-extensions:
- BangPatterns
- DeriveFoldable
- DeriveFunctor
- DeriveGeneric
- DeriveLift
- DeriveTraversable
- EmptyCase
- FlexibleContexts
- FlexibleInstances
- GeneralizedNewtypeDeriving
- InstanceSigs
- KindSignatures
- LambdaCase
- MultiParamTypeClasses
- MultiWayIf
- NamedFieldPuns
- NumericUnderscores
- OverloadedStrings
- ScopedTypeVariables
- StandaloneDeriving
- TupleSections

dependencies:
- base >=3 && <5

library:
  source-dirs: src/lib
  dependencies: []

executables:
  {{name}}:
    source-dirs: src/app
    main: Main.hs
    dependencies:
    - {{name}}

tests:
  {{name}}-test-suite:
    source-dirs: src/test
    main: Main.hs
    dependencies:
    - {{name}}
    - tasty
    - tasty-hunit
    - tasty-quickcheck
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

{-# START_FILE .gitignore #-}
# stack uses this directory for build artifacts
/.stack-work/

# stack generates the cabal file from `package.yaml` with hpack
/*.cabal

{-# START_FILE src/lib/Example.hs #-}
-- | An example module.
module Example
  ( example
  ) where


example :: IO ()
example = putStrLn "example"

{-# START_FILE src/app/Main.hs #-}
-- It is generally a good idea to keep all your business logic in your library
-- and only use it in the executable. Doing so allows others to use what you
-- wrote in their libraries.
import Example ( example )


main :: IO ()
main = do
  example

{-# START_FILE src/test/Main.hs #-}
-- Tasty makes it easy to test your code. It is a test framework that can
-- combine many different types of tests into one suite and has great output.
-- See its website for help:
-- <https://github.com/UnkindPartition/tasty>

import Test.Tasty
import Test.Tasty.HUnit
import Test.Tasty.QuickCheck


main :: IO ()
main = defaultMain $ testGroup " tests"
  [ unitTests
  , quickcheckProperties
  ]


unitTests :: TestTree
unitTests = testGroup "unit tests"
  [ testCase "True is True" $
      True @=? True
  ]


quickcheckProperties :: TestTree
quickcheckProperties = testGroup "quickcheck properties"
  [ testProperty "reverse twice results in the same list" $
      ((\l -> (reverse . reverse $ l) == l) :: [Char] -> Bool)
  ]

{-# START_FILE CHANGELOG.md #-}
1.0 (YYYY-MM-DD)

  * Initial release

{-# START_FILE README.md #-}
# {{name}}


## Synopsis


## Description


## Getting source

Source code is available from github at the [{{name}}](https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}) project page.

This project builds with stack with or without nix. To use it with nix, start a
nix shell from its top-level directory:

    $ nix-shell
    [nix-shell] $ stack build
    ...


## Contact

{{author-name}}{{^author-name}}Author name here{{/author-name}} <{{author-email}}{{^author-email}}example@example.com{{/author-email}}>

{-# START_FILE LICENSE #-}
Copyright (c) {{year}}{{^year}}2022{{/year}}, {{author-name}}{{^author-name}}Author name here{{/author-name}} <{{author-email}}{{^author-email}}Author email here{{/author-email}}>

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice appear
in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.

{-# START_FILE shell.nix #-}
let
  pkgs = import <nixpkgs> {};
in

pkgs.mkShell {
  # Add non-Haskell dependencies here, like native libraries and tools
  buildInputs = [
    pkgs.stack
  ];
  # alias stack to configure Nix integration and target the correct Stack-Nix file.
  # Note: Prefix with a backslash to use the unaliased stack: $ \stack ...
  #
  # - nix: Enable Nix support
  # - no-nix-pure: Pass environment variables, like `NIX_PATH`
  # - nix-shell-file: Specify the Nix file to use (otherwise it uses `shell.nix` by default)
  #
  # Configure the Nix path to our own `pkgs`, to ensure Stack-with-Nix uses the correct one rather than the global <nixpkgs> when looking for the right `ghc` argument to pass in `nix/stack-integration.nix`
  # See https://nixos.org/nixos/nix-pills/nix-search-paths.html for more information
  shellHook =
    ''
      alias stack='stack --nix --no-nix-pure --nix-shell-file=nix/stack-integration.nix'
      NIX_PATH="nixpkgs=${pkgs.path}"
    '';
}

{-# START_FILE nix/stack-integration.nix #-}
let
  pkgs = import <nixpkgs> {};
in

# See https://docs.haskellstack.org/en/stable/nix_integration/#using-a-custom-shellnix-file
{ ghc }:

pkgs.haskell.lib.buildStackProject {
  inherit ghc;
  name = "haskell-stack-nix";
  # System dependencies needed at compilation time
  buildInputs = [ ];
}


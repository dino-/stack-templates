{-# START_FILE {{name}}.cabal #-}
cabal-version: 2.2

name: {{name}}
version: 1.0
-- synopsis:
-- description:
author: {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer: {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright: {{year}}{{^year}}2022{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}
category: {{category}}{{^category}}Unclassified{{/category}}
license: ISC
license-file: LICENSE
build-type: Simple
extra-source-files:
  CHANGELOG.md
  .gitignore
  README.md
  stack.yaml

source-repository head
  type: git
  location: https://github.com/{{github-username}}/{{name}}

common lang
  default-language: Haskell2010
  default-extensions:
    BangPatterns
    DeriveFoldable
    DeriveFunctor
    DeriveGeneric
    DeriveLift
    DeriveTraversable
    EmptyCase
    FlexibleContexts
    FlexibleInstances
    GeneralizedNewtypeDeriving
    ImportQualifiedPost
    InstanceSigs
    KindSignatures
    LambdaCase
    MultiParamTypeClasses
    MultiWayIf
    NamedFieldPuns
    NumericUnderscores
    OverloadedStrings
    ScopedTypeVariables
    StandaloneDeriving
    TupleSections
  ghc-options:
    -fwarn-tabs
    -Wall
    -Wcompat
    -- -Werror  -- Around the time of lts-12.11 (ghc >= 8.4.3), this is no longer recommended
    -Wincomplete-record-updates
    -Wincomplete-uni-patterns
    -Wpartial-fields
    -Wredundant-constraints
  build-depends:
      base >=3 && <5
  -- other-modules:
  --   Paths_{{name}}
  -- autogen-modules:
  --   Paths_{{name}}

library
  import: lang
  exposed-modules:
      Example
  hs-source-dirs:
    src/lib
  -- build-depends:

executable {{name}}
  import: lang
  main-is: Main.hs
  hs-source-dirs:
    src/app
  build-depends:
      {{name}}

test-suite basic-wrk-test-suite
  import: lang
  type: exitcode-stdio-1.0
  main-is: Main.hs
  hs-source-dirs:
    src/test
  ghc-options: -rtsopts -threaded -with-rtsopts=-N
  build-depends:
      {{name}}
    , tasty
    , tasty-hunit
    , tasty-quickcheck

{-# START_FILE .gitignore #-}
# stack uses this directory for build artifacts
/.stack-work/

# Made by 'hasktags --ctags .'
tags

{-# START_FILE src/lib/Example.hs #-}
-- | An example module.
module Example
  ( example
  ) where


example :: IO ()
example = putStrLn "example"

{-# START_FILE src/app/Main.hs #-}
-- It is generally a good idea to keep all your business logic in your library
-- and only use it in the executable. Doing so allows others to use what you
-- wrote in their libraries.
import Example ( example )


main :: IO ()
main = do
  example

{-# START_FILE src/test/Main.hs #-}
-- Tasty makes it easy to test your code. It is a test framework that can
-- combine many different types of tests into one suite and has great output.
-- See its website for help:
-- <https://github.com/UnkindPartition/tasty>

import Test.Tasty
import Test.Tasty.HUnit
import Test.Tasty.QuickCheck


main :: IO ()
main = defaultMain $ testGroup " tests"
  [ unitTests
  , quickcheckProperties
  ]


unitTests :: TestTree
unitTests = testGroup "unit tests"
  [ testCase "True is True" $
      True @=? True
  ]


quickcheckProperties :: TestTree
quickcheckProperties = testGroup "quickcheck properties"
  [ testProperty "reverse twice results in the same list" $
      ((\l -> (reverse . reverse $ l) == l) :: [Char] -> Bool)
  ]

{-# START_FILE CHANGELOG.md #-}
1.0 (YYYY-MM-DD)

  * Initial release

{-# START_FILE README.md #-}
# {{name}}


## Synopsis


## Description


## Getting source

Source code is available from github at the [{{name}}](https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}) project page.


## Contact

{{author-name}}{{^author-name}}Author name here{{/author-name}} <{{author-email}}{{^author-email}}example@example.com{{/author-email}}>

{-# START_FILE LICENSE #-}
Copyright (c) {{year}}{{^year}}2022{{/year}}, {{author-name}}{{^author-name}}Author name here{{/author-name}} <{{author-email}}{{^author-email}}Author email here{{/author-email}}>

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice appear
in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.

